*tangerine.txt*                           Sweet fennel integeration for neovim

==============================================================================
Table of Contents                                *tangerine-table-of-contents*

1. Introduction                                       |tangerine-introduction|
  - Features                                              |tangerine-features|
  - Comparison to other plugins        |tangerine-comparison-to-other-plugins|
  - Installation                                      |tangerine-installation|
2. Setup                                                     |tangerine-setup|
3. Commands                                               |tangerine-commands|
4. FAQ and Tricks                                   |tangerine-faq-and-tricks|
5. Api                                                         |tangerine-api|
  - Compiler Api                                      |tangerine-compiler-api|
  - Cleaning Api                                      |tangerine-cleaning-api|
  - Evaluation Api                                  |tangerine-evaluation-api|
  - Utils Api                                            |tangerine-utils-api|
  - Fennel Api                                          |tangerine-fennel-api|
6. Contributing                                       |tangerine-contributing|
  - Requirements                                      |tangerine-requirements|
  - Building from source                      |tangerine-building-from-source|
  - Make Targets                                      |tangerine-make-targets|
  - Git Hooks                                            |tangerine-git-hooks|
  - LOC Helpers                                        |tangerine-loc-helpers|
7. The End                                                 |tangerine-the-end|



==============================================================================
1. Introduction                                       *tangerine-introduction*

Tangerine provides a painless way to add fennel to your neovim config, without
adding to your load times.

It prioritizes speed, transparency and minimalism and It’s lightning fast
thanks to it diffing algorithm.

FEATURES                                                  *tangerine-features*


- _BLAZING_ fast, compiles files in milliseconds
- 200% support for interactive evaluation
- Transparent, doesn’t create stupid abstractions
- Natively loads `nvim/init.fnl`


COMPARISON TO OTHER PLUGINS            *tangerine-comparison-to-other-plugins*

                                                            *tangerine-HOTPOT*


- Abstracts too much away from user.
- Hooks onto lua package searchers to compile [harder to debug]


                                                           *tangerine-ANISEED*


- Excessively feature rich to be used for dotfiles.
- Blindly compiles all files that it founds, resulting in slow load times.


INSTALLATION                                          *tangerine-installation*


1. create file `plugin/tangerine.lua` in your config dir
1. add these lines to automatically bootstrap tangerine


>
    -- ~/.config/nvim/plugin/tangerine.lua
    
    -- pick your plugin manager, default [standalone]
    local pack = "tangerine" or "packer" or "paq"
    
    local remote = "https://github.com/udayvir-singh/tangerine.nvim"
    local tangerine_path = vim.fn.stdpath "data" .. "/site/pack/" .. pack .. "/start/tangerine.nvim"
    
    if vim.fn.empty(vim.fn.glob(tangerine_path)) > 0 then
        print [[tangerine.nvim: installing in data dir... ]]
        vim.fn.system {"git", "clone", remote, tangerine_path}
        vim.cmd [[redraw]]
        print [[tangerine.nvim: finished installing ]]
    end
<



1. call setup() function


>
    -- ~/.config/nvim/plugin/tangerine.lua
    
    local tangerine = require [[tangerine]]
    
    tangerine.setup {}
<



1. invoke `:FnlCompile` to run tangerine manually or add |tangerine-hooks| in your
config.
1. create `~/.config/nvim/init.fnl`, and let tangerine do its magic.


------------------------------------------------------------------------------

You can use a plugin manager to manage tangerine afterwards.

                                                            *tangerine-Packer*

>
    (local packer (require :packer))
    
    (packer.startup (fn []
        (use :udayvir-singh/tangerine.nvim)))
<


                                                               *tangerine-Paq*

>
    (local paq (require :paq))
    
    (paq {
        :udayvir-singh/tangerine.nvim
    })
<


==============================================================================
2. Setup                                                     *tangerine-setup*

Tangerine comes with sane defaults so that you can get going without having to
add much to your config. #### Default config

>
    local config = vim.stdpath [[config]]
    
    {
        vimrc   = config .. "/init.fnl",
        source  = config .. "/fnl",
        target  = config .. "/lua",
        rtpdirs = {},
    
        compiler = {
            float   = true,     -- show output in floating window
            clean   = true,     -- delete stale lua files
            force   = false,    -- disable diffing (not recommended)
            verbose = true,     -- enable messages showing compiled files
    
            globals = {...},    -- list of alowedGlobals
            version = "latest", -- version of fennel to use, [ latest, 1-0-0, 0-10-0, 0-9-2 ]
    
            -- hooks for tangerine to compile on:
            -- "onsave" run every time you save fennel file in {source} dir.
            -- "onload" run on VimEnter event
            -- "oninit" run before sourcing init.fnl [recommended than onload]
            hooks   = []
        },
    
        eval = {
            float  = true,      -- show results in floating window
            luafmt = function() -- function that returns formater for peaked lua
                return {"lua-format"}
            end,
    
            diagnostic = { 
                virtual = true,  -- show errors in virtual text
                timeout = 10     -- how long should the error persist
            }
        },
    
        keymaps = {
            eval_buffer = "gE",
            peak_buffer = "gL",
            goto_output = "gO",
            float = {
                next    = "<C-K>",
                prev    = "<C-J>",
                kill    = "<Esc>",
                close   = "<Enter>",
                resizef = "<C-W>=",
                resizeb = "<C-W>-"
            }
        },
    
        highlight = {
            float   = "Normal",
            success = "String",
            errors  = "DiagnosticError"
        },
    }
<


                                                    *tangerine-Example-Config*

Example Config                         Here is config that I use in my dotfiles


>
    {
        -- save fnl output in a separate dir, it gets automatically added to package.path
        target = vim.fn.stdpath [[data]] .. "/tangerine",
    
        -- compile files in &rtp
        rtpdirs = {
            "plugin",
            "colors",
            "$HOME/mydir" -- absolute paths are also supported
        },
    
        compiler = {
            -- compile every time changed are made to fennel files or on entering vim
            hooks = ["onsave", "oninit"]
        }
    }
<


That’s It now get writing your vim config in fennel

==============================================================================
3. Commands                                               *tangerine-commands*

                             *tangerine-:FnlCompileBuffer* *:FnlCompileBuffer*

:FnlCompileBuffer                      Compiles current active fennel buffer


                                         *tangerine-:FnlCompile* *:FnlCompile*

:FnlCompile[!]                         Diff compiles fennel files in `source`
                                       dir to `target` dir


If bang! is present then forcefully compiles all `source` files

                                             *tangerine-:FnlClean* *:FnlClean*

:FnlClean[!]                           Deletes stale or orphaned lua files in
                                       `target` dir


If bang! is present then it deletes all lua files.

                                                       *tangerine-:Fnl* *:Fnl*

:Fnl {expr}                            Executes and Evalutate {expr} of fennel


>
    :Fnl (print "Hello World")
      -> Hello World
    
    :Fnl (values some_var)
      -> :return [ 1 2 3 4 ]
<


                                               *tangerine-:FnlFile* *:FnlFile*

:FnlFile {file}                        Evaluates {file} of fennel and outputs
                                       the result


>
    :FnlFile path/source.fnl
    
    :FnlFile % ;; not recomended
<


                                           *tangerine-:FnlBuffer* *:FnlBuffer*

:[range]FnlBuffer                      Evaluates all lines or [range] in
                                       current fennel buffer



  mapped to `gE` by default.


                                               *tangerine-:FnlPeak* *:FnlPeak*

:[range]FnlPeak                        Peak lua output for [range] in current
                                       fennel buffer



  mapped to `gL` by default.


                                   *tangerine-:FnlGotoOutput* *:FnlGotoOutput*

:FnlGotoOutput                         Open lua output of current fennel buffer
                                       in a new buffer



  mapped to `gO` by default.


                                         *tangerine-:FnlWinNext* *:FnlWinNext*

:FnlWinNext [N]                        Jump to [N]th next floating window
                                       created by tangerine



  mapped to `CTRL-K` in floats by default.


                                         *tangerine-:FnlWinPrev* *:FnlWinPrev*

:FnlWinPrev [N]                        Jump to [N]th previous floating window
                                       created by tangerine



  mapped to `CTRL-J` in floats by default.


                                     *tangerine-:FnlWinResize* *:FnlWinResize*

:FnlWinResize [N]                      Increase or Decrease floating window
                                       height by [N] factor



  mapped to `CTRL-W =` to increase and `CTRL-W -` decrease by default.


                                       *tangerine-:FnlWinClose* *:FnlWinClose*

:FnlWinClose                           Closes current floating window under
                                       cursor



  mapped to `ENTER` in floats by default.


                                         *tangerine-:FnlWinKill* *:FnlWinKill*

:FnlWinKill                            Closes all floating windows made by
                                       tangerine



  mapped to `ESC` in floats by default.


==============================================================================
4. FAQ and Tricks                                   *tangerine-faq-and-tricks*

Q: HOW TO MAKE TANGERINE COMPILE AUTOMATICALLY WHEN YOU OPEN VIM

Ans: add hooks in config of `setup()` function:

>
    -- if you want to compile before loading init.fnl (recommended)
    hooks = ["oninit"]
    
    -- if you only want after VimEnter event has fired
    hooks = ["onenter"]
<


Q: HOW TO TUCK AWAY COMPILED OUTPUT IN A SEPARATE DIRECTORY

Ans: change source in config

>
    source = "/path/to/your/dir"
<


GET UNDERLYING FENNEL USED BY TANGERINE

Call `(tangerine.fennel {version})`, see fennel |tangerine-api|

>
    (tangerine.fennel (or :latest :1-0-0 :0-10-0 :0-9-2))
<


==============================================================================
5. Api                                                         *tangerine-api*

By default tangerine provides the following api

>
    :Fnl tangerine.api
    
    > :return {
        :compile {
          :all    <function 0>
          :buffer <function 1>
          :dir    <function 2>
          :file   <function 3>
          :rtp    <function 4>
          :string <function 5>
          :vimrc  <function 6>
        }
        :clean {
          :rtp      <function 7>
          :target   <function 8>
          :orphaned <function 9>
        }
        :eval {
          :buffer <function 10>
          :file   <function 11>
          :peak   <function 12>
          :string <function 13>
        }
        :win {
          :next    <function 14>
          :prev    <function 15>
          :close   <function 16>
          :killall <function 17>
          :resize  <function 18>
        }
        :goto_output <function 19>
        :serialize   <function 20>
      }
<


COMPILER API                                          *tangerine-compiler-api*

This section describes function for `tangerine.api.compile.{func}`

                   *tangerine-compile-string* *tangerine.api.compile.string()*

compile-string                         (compile.string {str})


Compiles string {str} of fennel, returns string of lua


  `[can throw errors]`


                       *tangerine-compile-file* *tangerine.api.compile.file()*

compile-file                           (compile.file {source} {target})


Compiles fennel {source} and writes output to {target}


  `[can throw errors]`


                         *tangerine-compile-dir* *tangerine.api.compile.dir()*

compile-dir                            (compile-dir {source} {target} {opts})


Compiles fennel in files {source} dir to {target} dir

{opts} can be of table:

>
    {
        :force   <boolean>
        :verbose <boolean>
    }
<


If {opts.force} != `true` then it diffs files for compiling

Example:

>
    (tangerine.api.compile.dir 
        :path/fnl 
        :path/lua
        { :force false :verbose true })
<


                   *tangerine-compile-buffer* *tangerine.api.compile.buffer()*

compile-buffer                         (compile-buffer {opts})


Compiles current fennel buffer

opts can be of table:

>
    {
        :verbose <boolean>
    }
<


                     *tangerine-compile-vimrc* *tangerine.api.compile.vimrc()*

compile-vimrc                          (compile-vimrc {opts})


Compiles `config.vimrc` to `config.target/tangerine_vimrc.lua`

opts can be of table:

>
    {
        :force   <boolean>
        :verbose <boolean>
    }
<


If {opts.force} != `true` then it diffs files for compiling

                         *tangerine-compile-rtp* *tangerine.api.compile.rtp()*

compile-rtp                            (compile.rtp {opts})


Compiles fennel files in `config.rtpdirs`.

opts can be of table:

>
    {
        :force   <boolean>
        :verbose <boolean>
        :rtpdirs <list>
    }
<


If {opts.force} != `true` then it diffs files for compiling

Example:

>
    (tangerine.api.compile.rtp {
        :force false
        :verbose true
        :rtpdirs [
            "colors"
            "plugin"
            "~/somedir"
        ]
    })
<


                         *tangerine-compile-all* *tangerine.api.compile.all()*

compile-all                            (compile.all {opts})


Compiles all indexed fennel files in `config` dirs.

opts can be of table:

>
    {
        :force   <boolean>
        :verbose <boolean>
        :rtpdirs <list>
    }
<


If {opts.force} != `true` then it diffs files for compiling

CLEANING API                                          *tangerine-cleaning-api*

Tangerine comes with functions to clean stale lua file in target dir without
their fennel parents.

This section describes function for `tangerine.api.clean.{func}`

                       *tangerine-clean-target* *tangerine.api.clean.target()*

clean-target                           (clean.target {target} {force})


Deletes lua files in {target} dir without their fennel parent

If {force} == `true`, then it deletes all compiled files

                   *tangerine-clean-orphaned* *tangerine.api.clean.orphaned()*

clean-orphaned                         (clean.orphaned {opts})


Deletes lua files in `config.target` dir without their fennel parent

opts can be of table:

>
    {
        :force <boolean>
        :verbose <boolean>
    }
<


If {opts.force} == `true`, then it deletes all compiled files

EVALUATION API                                      *tangerine-evaluation-api*

This section describes function for `tangerine.api.eval.{func}`

                         *tangerine-eval-string* *tangerine.api.eval.string()*

eval-string                            (eval.string {str})


Evaluates string {str} of fennel, and prints the output

Can throw errors

                             *tangerine-eval-file* *tangerine.api.eval.file()*

eval-file                              (eval.file {path})


Evaluates {path} of fennel, and prints the output

Can throw errors

                           *tangerine-eval-range* *tangerine.api.eval.range()*

eval-range                             (eval.range {start} {end} {count})


Evaluates range {start} to {end} in vim buffer 0

Optionally takes {count}, only meant to be used in command definitions

                         *tangerine-eval-buffer* *tangerine.api.eval.buffer()*

eval-buffer                            (eval.buffer)


Evaluates all lines in vim buffer 0, wrapper around `(eval.range 1 -1)`

UTILS API                                                *tangerine-utils-api*

                             *tangerine-serialize* *tangerine.api.serialize()*

serialize                              (tangerine.api.serialize {object})


Return a human-readable representation of given {object}

Example:

>
    (tangerine.api.serialize [1 2 3 4])
    -> "[ 1 2 3 4 ]"
<


                         *tangerine-goto_output* *tangerine.api.goto_output()*

goto_output                            (tangerine.api.goto_output)


Open lua source of current fennel buffer in a new buffer

FENNEL API                                              *tangerine-fennel-api*

Underlying fennel used by tangerine can by accessed by calling
`tangerine.fennel`

(tangerine.fennel {version})

{version} can be one of [ `latest` `1-0-0` `0-10-0` `0-9-2` ], default
`config.compiler.version`

==============================================================================
6. Contributing                                       *tangerine-contributing*

REQUIREMENTS                                          *tangerine-requirements*

│  Program   │         Description         │
│pandoc <>   │for generating vimdoc        │
│make <>     │for build instructions       │
│lua <>      │for running fennel (included)│
│bash <>     │for running shell scripts    │
│coreutils <>│required by shell scripts    │


BUILDING FROM SOURCE                          *tangerine-building-from-source*

>
    git clone https://github.com/udayvir-singh/tangerine.nvim
    cd tangerine.nvim
    
    make <git-hooks>
    make <target>
<


see `make help` or |tangerine-below| for information on targets.

MAKE TARGETS                                          *tangerine-make-targets*

│   Target   │              Description              │
│:fnl        │compiles fennel files                  │
│:deps       │copy required deps in lua folder       │
│:vimdoc     │runs panvimdoc to generate vimdocs     │
│:build      │combines :fnl :deps :vimdoc            │
│:install    │install tangerine on this system       │
│:clean      │deletes build and install dir          │



- To build tangerine run:


>
    $ make clean build
<



- Then to install it:


>
    $ make install
<


GIT HOOKS                                                *tangerine-git-hooks*

│    Target    │                         Description                          │
│git-pull      │safely fetches git repo, prevents conflicts with local changes│
│git-skip      │makes git ignore build dirs, run before make :build           │
│git-unskip    │reverts git-skip, run after make build                        │



- Example workflow:


>
    $ make git-skip # first thing that you should be running
    
    # makes changes to tangerine
    $ make clean build
    
    # commit changes 
    $ git commit -a -m "<msg>"
    $ git push
    
    # cleanly fetch from origin
    $ make git-pull
<


LOC HELPERS                                            *tangerine-loc-helpers*

Tangerine comes with helpers to generate detailed summary about lines of source
code

>
    $ make loc-{language}
<


Supported Languages: - fennel - bash / shellscript - markdown - makefile - yaml

Examples:

>
    $ make loc-fennel
    
    $ make loc-bash
<


==============================================================================
7. The End                                                 *tangerine-the-end*

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
